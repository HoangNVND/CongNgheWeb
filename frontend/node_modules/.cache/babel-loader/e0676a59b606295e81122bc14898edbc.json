{"ast":null,"code":"import { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS // ORDER_LIST_MY_FAIL,\n// ORDER_LIST_MY_REQUEST,\n// ORDER_LIST_MY_SUCCESS,\n// ORDER_PAY_FAIL,\n// ORDER_PAY_REQUEST,\n// ORDER_PAY_SUCCESS,\n} from \"../Constants/OrderConstants.js\";\nimport axios from \"axios\";\nimport { logOut } from \"./userActions\"; // CREATE ORDER\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch;\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logOut());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n}; // ORDER DETAILS\n\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logOut());\n    }\n\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n}; // ORDER PAY\n// export const payOrder =\n//   (orderId, paymentResult) => async (dispatch, getState) => {\n//     try {\n//       dispatch({ type: ORDER_PAY_REQUEST });\n//       const {\n//         userLogin: { userInfo },\n//       } = getState();\n//       const config = {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       };\n//       const { data } = await axios.put(\n//         `/api/orders/${orderId}/pay`,\n//         paymentResult,\n//         config\n//       );\n//       dispatch({ type: ORDER_PAY_SUCCESS, payload: data });\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message;\n//       if (message === \"Not authorized, token failed\") {\n//         dispatch(logOut());\n//       }\n//       dispatch({\n//         type: ORDER_PAY_FAIL,\n//         payload: message,\n//       });\n//     }\n//   };\n// // USER ORDERS\n// export const listMyOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({ type: ORDER_LIST_MY_REQUEST });\n//     const {\n//       userLogin: { userInfo },\n//     } = getState();\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n//     const { data } = await axios.get(`/api/orders/`, config);\n//     dispatch({ type: ORDER_LIST_MY_SUCCESS, payload: data });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     if (message === \"Not authorized, token failed\") {\n//       dispatch(logOut());\n//     }\n//     dispatch({\n//       type: ORDER_LIST_MY_FAIL,\n//       payload: message,\n//     });\n//   }\n// };","map":{"version":3,"sources":["/Users/nguyenhoang/Documents/WebCourses/PROJECTS/frontend/src/Redux/Actions/OrderActions.js"],"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","axios","logOut","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response","getOrderDetails","id","get"],"mappings":"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","sourcesContent":["import {\n  ORDER_CREATE_FAIL,\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  // ORDER_LIST_MY_FAIL,\n  // ORDER_LIST_MY_REQUEST,\n  // ORDER_LIST_MY_SUCCESS,\n  // ORDER_PAY_FAIL,\n  // ORDER_PAY_REQUEST,\n  // ORDER_PAY_SUCCESS,\n} from \"../Constants/OrderConstants.js\";\nimport axios from \"axios\";\nimport { logOut } from \"./userActions\";\n\n// CREATE ORDER\nexport const createOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_CREATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.post(`/api/orders`, order, config);\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\n    dispatch\n\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logOut());\n    }\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message,\n    });\n  }\n};\n\n// ORDER DETAILS\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_DETAILS_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logOut());\n    }\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message,\n    });\n  }\n};\n// ORDER PAY\n// export const payOrder =\n//   (orderId, paymentResult) => async (dispatch, getState) => {\n//     try {\n//       dispatch({ type: ORDER_PAY_REQUEST });\n\n//       const {\n//         userLogin: { userInfo },\n//       } = getState();\n\n//       const config = {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.put(\n//         `/api/orders/${orderId}/pay`,\n//         paymentResult,\n//         config\n//       );\n//       dispatch({ type: ORDER_PAY_SUCCESS, payload: data });\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message;\n//       if (message === \"Not authorized, token failed\") {\n//         dispatch(logOut());\n//       }\n//       dispatch({\n//         type: ORDER_PAY_FAIL,\n//         payload: message,\n//       });\n//     }\n//   };\n\n// // USER ORDERS\n// export const listMyOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({ type: ORDER_LIST_MY_REQUEST });\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState();\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n\n//     const { data } = await axios.get(`/api/orders/`, config);\n//     dispatch({ type: ORDER_LIST_MY_SUCCESS, payload: data });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     if (message === \"Not authorized, token failed\") {\n//       dispatch(logOut());\n//     }\n//     dispatch({\n//       type: ORDER_LIST_MY_FAIL,\n//       payload: message,\n//     });\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}